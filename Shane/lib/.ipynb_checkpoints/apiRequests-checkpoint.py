{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##################################################################################################\n",
    "#\n",
    "# Store Adobe Audience Manager REST API credentials in object\n",
    "# Issue API calls with Request class\n",
    "#\n",
    "##################################################################################################\n",
    "__author__ = \"Shane Nielson\"\n",
    "__email__ = \"shnielso@adobe.com\"\n",
    "\n",
    "# Imports\n",
    "import base64\n",
    "import requests\n",
    "import logging\n",
    "\n",
    "# Configure Logging\n",
    "logging.basicConfig(level=logging.INFO)\n",
    "logger = logging.getLogger(__name__)\n",
    "\n",
    "class Credentials:\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        Stores information to make REST API calls for Adobe Audience Manager\n",
    "\n",
    "        :_client_id: API client ID : string\n",
    "        :_client_secret: API client secret : string\n",
    "        :_username: Demdex username : string\n",
    "        :_password: Demdex password : string\n",
    "        :_enoced_auth: client_id and client_secret combined and base64 encoded : string\n",
    "        :_access_token: Bearer access token from the demdex ouath domain : string\n",
    "        :_domain: API domain address for oauth tokens: string\n",
    "        \"\"\"\n",
    "        self._client_id = None\n",
    "        self._client_secret = None\n",
    "        self._username = None\n",
    "        self._password = None\n",
    "        self._encoded_auth = None\n",
    "        self._access_token = None\n",
    "        self._domain = \"https://api.demdex.com/oauth/token\"\n",
    "\n",
    "    @property\n",
    "    def client_id(self):\n",
    "        return self._client_id\n",
    "\n",
    "    @property\n",
    "    def client_secret(self):\n",
    "        return self._client_secret\n",
    "\n",
    "    @property\n",
    "    def username(self):\n",
    "        return self._username\n",
    "\n",
    "    @property\n",
    "    def password(self):\n",
    "        return self._password\n",
    "\n",
    "    @property\n",
    "    def encoded_auth(self):\n",
    "        return self._encoded_auth\n",
    "\n",
    "    @property\n",
    "    def access_token(self):\n",
    "        return self._access_token\n",
    "\n",
    "    @client_id.setter\n",
    "    def client_id(self, value):\n",
    "        self._client_id = value\n",
    "\n",
    "    @client_secret.setter\n",
    "    def client_secret(self, value):\n",
    "        self._client_secret = value\n",
    "\n",
    "    @username.setter\n",
    "    def username(self, value):\n",
    "        self._username = value\n",
    "\n",
    "    @password.setter\n",
    "    def password(self, value):\n",
    "        self._password = value\n",
    "\n",
    "    @encoded_auth.setter\n",
    "    def encoded_auth(self, value):\n",
    "        self._encoded_auth = value\n",
    "\n",
    "    @access_token.setter\n",
    "    def access_token(self, value):\n",
    "        self._access_token = value\n",
    "\n",
    "\n",
    "    def encode(self):\n",
    "        if self.client_id is None or self.client_secret is None:\n",
    "            logger.error(\"Empty client id or client secret\")\n",
    "            logger.debug(\"client_id: %s | client_secret: %s\" % (self.client_id, self.client_secret))\n",
    "            return\n",
    "        logger.info(\"Encoding %s:%s\" % (self.client_id, self.client_secret))\n",
    "        self._encoded_auth = base64.urlsafe_b64encode(\"%s:%s\" % (self.client_id, self.client_secret))\n",
    "        logger.debug(\"Encoded value: %s\" % self.encoded_auth)\n",
    "\n",
    "    def get_token(self):\n",
    "        if self.username is None or self.password is None:\n",
    "            logger.error(\"Empty username or password\")\n",
    "            return\n",
    "\n",
    "        if self.encoded_auth is None:\n",
    "            logger.error(\"Empty encoded api credentials\")\n",
    "            return\n",
    "\n",
    "        payload = \"grant_type=password&username=%s&password=%s\" % (self.username, self.password)\n",
    "        headers = {\n",
    "            'Accept': \"application/json\",\n",
    "            'Content-Type': \"application/x-www-form-urlencoded\",\n",
    "            'Authorization': \"Basic %s\" % self.encoded_auth,\n",
    "            'cache-control': \"no-cache\",\n",
    "        }\n",
    "        logger.debug(\"Payload: %s\" % payload)\n",
    "        logger.debug(\"Headers: %s\" % headers)\n",
    "        logger.info(\"Sending request to %s\" % self._domain)\n",
    "        response = requests.request(\"POST\", self._domain, data=payload, headers=headers)\n",
    "        if response.status_code is 200:\n",
    "            try:\n",
    "                self._access_token = response.json()['access_token']\n",
    "            except Exception, e:\n",
    "                logger.error(\"%s: Failed to get token\" % response.reason, exc_info=True)\n",
    "        else:\n",
    "            logger.error(\"%s : Unable to connect, please check inputs/network settings\" % response.reason)\n",
    "\n",
    "class Request():\n",
    "    def __init__(self, token):\n",
    "        \"\"\"\n",
    "        :_domain: API url for all API calls : string\n",
    "        :_version: version for API calls : string\n",
    "        :_header: Header to pass in during API requests. Stores access token : string\n",
    "        \"\"\"\n",
    "        self._domain = \"https://api.demdex.com\"\n",
    "        self._version = \"v1\"\n",
    "        self._header = {\n",
    "            'Accept': \"application/json\",\n",
    "            'Content-Type': \"application/json\",\n",
    "            'Authorization': \"Bearer %s\" % token,\n",
    "            'cache-control': \"no-cache\",\n",
    "        }\n",
    "\n",
    "    def get_traits_by_dpid(self, dpid):\n",
    "        url = \"%s/%s/traits/\" % (self._domain, self._version)\n",
    "        querystring = {\"dataSourceId\": dpid}\n",
    "\n",
    "        logger.info(\"Sending request to %s\" % url)\n",
    "        return requests.request(\"GET\", url, headers=self._header, params=querystring)\n",
    "\n",
    "    def get_destination_by_segment(self, segment):\n",
    "        url = \"%s/%s/destinations/\" % (self._domain, self._version)\n",
    "        querystring = {\"containsSegment\": segment}\n",
    "\n",
    "        logger.info(\"Sending request to %s\" % url)\n",
    "        return requests.request(\"GET\", url, headers=self._header, params=querystring)\n",
    "    \n",
    "    def put_destination_mapping(self, payload):\n",
    "        if payload['destinationId']:\n",
    "            destinationId = payload['destinationId']\n",
    "            del payload['destinationId']\n",
    "        else:\n",
    "            logger.error(\"No destinationId found\")\n",
    "            return\n",
    "\n",
    "        if payload['destinationMappingId']:\n",
    "            destinationMappingId = payload['destinationMappingId']\n",
    "            del payload['destinationMappingId']\n",
    "        else:\n",
    "            logger.error(\"No destinationMappingId found\")\n",
    "            return\n",
    "\n",
    "        url = \"%s/%s/destinations/%s/mappings/%s\" % (self._domain, self._version, destinationId, destinationMappingId)\n",
    "\n",
    "        logger.info(\"Sending request to %s\" % url)\n",
    "        logger.debug(payload)\n",
    "        return requests.put(url, data=json.dumps(payload), headers=self._header)    \n",
    "\n",
    "    def get_data_sources(self):\n",
    "        url = \"%s/%s/datasources/\" % (self._domain, self._version)\n",
    "\n",
    "        logger.info(\"Sending request to %s\" % url)\n",
    "        return requests.request(\"GET\", url, headers=self._header)\n",
    "    \n",
    "    def get_destination_mapping(self, orderId):\n",
    "        url = \"https://api.demdex.com/v1/destinations/%s/mappings\" % (orderId)\n",
    "\n",
    "        logger.info(\"Sending request to %s\" % url)\n",
    "        return requests.request(\"GET\", url, headers=self._header)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
